buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

group= "uk.kihira.tails"
archivesBaseName = "Tails"
version = "2.0.0"

if (System.getenv("BRANCH_NAME") != null && System.getenv("BRANCH_NAME") != "master") {
    version += "-${System.getenv("BRANCH_NAME")}"
}
if (System.getenv("BUILD_NUMBER") != null) {
    version += "-${System.getenv("BUILD_NUMBER")}"
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                tails {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                tails {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'tails', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                tails {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

test {
	useJUnitPlatform()
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Tails",
            "Specification-Vendor": "Kihira",
            "Specification-Version": "1", 
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Kihira",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar') 
publish.dependsOn('reobfJar')

publishing {
    publications {
        java(MavenPublication) {
            artifactId "Tails"
            artifact jar
        }
    }

    repositories {
        maven {
            url 'https://pkgs.dev.azure.com/kihira/Tails/_packaging/Tails/maven/v1'
            credentials {
                username "AZURE_ARTIFACTS"
                password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "${azureArtifactsGradleAccessToken}"
            }
        }
    }
}